# -*- coding: utf-8 -*-
"""AB Testing / Regression.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1wQEziQazG2z2B-ar__iP_qEVAb0MZmON
"""

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np
from sklearn. linear_model import LinearRegression
from sklearn.metrics import r2_score, mean_squared_error
from statsmodels.tsa.seasonal import seasonal_decompose
from statsmodels.tsa.stattools import coint
import warnings
warnings. filterwarnings('ignore')
from google.colab import files

upload = files.upload()

df = pd.read_csv('marketing_campaign.csv', encoding='unicode_escape')
df.head()

df.describe()

df.dtypes

#Comparing Campaigns Performance
plt.figure(figsize=(25,6))
plt.subplot(1,2,1)
plt.title('AdWords Ad Clicks')
sns.histplot(df['AdWords Ad Campaign'],bins = 7 , edgecolor = 'y',kde= True)

plt.subplot(1,2,2)
plt.title('AdWords Ad Conversions')
sns.histplot(df['AdWords Ad Clicks'],bins = 7 , edgecolor = 'y',kde= True)
plt.show()

#Comparing Campaigns Performance
plt.figure(figsize=(20,6))
plt.subplot(1,2,1)
plt.title('Facebook Ad Clicks')
sns.histplot(df['Facebook Ad Clicks'],bins = 7 , edgecolor = 'y',kde= True)

plt.subplot(1,2,2)
plt.title('Facebook Ad Views')
sns.histplot(df['Facebook Ad Views'],bins = 7 , edgecolor = 'y',kde= True)
plt.show()

# @title Default title text
# TO check high conversions days -
def create_conversion_category(conversion_col):
  category = []
  for conversion in conversion_col:
    if conversion < 6:
      category.append('Less than 6')
    elif conversion >= 6 and conversion < 12:
      category.append('6-12')
    elif conversion >= 12 and conversion < 18:
      category.append('12-18')
    else:
      category.append('More than 18')
  return category

df['AdWords Ad Conversions'] = df['AdWords Ad Conversions'].astype(int)

df['Adwords Conversion category' ] = create_conversion_category(df['AdWords Ad Conversions'])
df['Facebook Conversion category' ] = create_conversion_category(df['Facebook Ad Conversions'])

ax = sns.barplot(x='Adwords Conversion category', y='AdWords Ad Conversions', data=df)

from os import rename
Ad_cat = df.groupby('Adwords Conversion category', as_index =False)['AdWords Ad Conversions'].count().rename(columns={'Adwords Conversion category' : 'Category'})
print(Ad_cat)

FB_cat = (
    df.groupby('Facebook Conversion category', as_index=False)['Facebook Ad Conversions']
      .count()
      .sort_values('Facebook Ad Conversions', ascending=False)
      .rename(columns={'Facebook Conversion category': 'Category',
                       'Facebook Ad Conversions': 'Conversion_Count'})
)

print(FB_cat)

category_df = pd.merge(Ad_cat,FB_cat, on='Category', how='outer').fillna(0)
print(category_df)

X_axis = np.arange(len(category_df))
print(X_axis)


